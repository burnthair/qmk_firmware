| OTHER LAYOUT IDEAS:
    TODO general mac navigation
    TODO    open finder
    TODO    use mac keybindings to set to f13 - f22 for things that aren't working well?
    TODO    close window
    TODO    close program
    TODO vscode/text navigation
    TODO shortcuts to help documents, maybe displayed on ereader


https://www.reddit.com/r/olkb/comments/bauj0t/can_you_change_encoders_output_using_layers_qmk/

/* Copyright 2019 Danny Nguyen <danny@keeb.io>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H
#define _MEDIA 0
#define _MAPTOOLS 1
#define _AUDACITY 2


const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_MEDIA] = LAYOUT(
        KC_MUTE           , TO(_MAPTOOLS)     , KC_MPLY, \
        LCTL(LALT(KC_DEL)), BL_STEP           , RGB_MOD, \
        KC_APP            , LCTL(RSFT(KC_ESC)), KC_MSTP  \
    ),
    [_MAPTOOLS] = LAYOUT(
        KC_PLUS,   TO(_AUDACITY), KC_LSFT, \
        LCTL(LALT(KC_ENT)), BL_STEP, RGB_MOD, \
        LCTL(KC_E), LCTL(KC_F),  LCTL(KC_S) \
    ),
    [_AUDACITY] = LAYOUT(
        LCTL(KC_2),   TO(_MEDIA), KC_LSFT, \
        LCTL(RSFT(KC_F)), RSFT(KC_R), KC_P, \
        KC_LSFT, KC_SPC,  KC_X \
    ),
};

void encoder_update_user(uint8_t index, bool clockwise) {
// left encoder
    if (index == 0) {
        switch(biton32(layer_state)){
             case 2:
                if (clockwise) {
                register_code(KC_LCTL);
                tap_code(KC_3);
                unregister_code(KC_LCTL);
                } else {
                register_code(KC_LCTL);
                tap_code(KC_1);
                unregister_code(KC_LCTL);
                }
                break;
            case 1:
                if (clockwise) {
                tap_code(KC_MINS);
                } else {
                tap_code(KC_EQL);

                }
                break;
            default:
                if (clockwise){
                    tap_code(KC_VOLU);
                } else{
                    tap_code(KC_VOLD);
                }
                break;
      }
    }
// right encoder
    else if (index == 1) {
        switch(biton32(layer_state)){
            case 1:
                if (clockwise){
                    tap_code(KC_RGHT);
                } else{
                    tap_code(KC_LEFT);
                }
                break;
            case 2:
                if (clockwise){
                    tap_code(KC_RGHT);
                } else{
                    tap_code(KC_LEFT);
                }
                break;
            default:
                if (clockwise) {
                    tap_code(KC_MNXT);
                } else {
                    tap_code(KC_MPRV);
                }
                break;
      }
}
}
